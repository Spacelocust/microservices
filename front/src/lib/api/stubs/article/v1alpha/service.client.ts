// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "article/v1alpha/service.proto" (package "article.v1alpha", syntax proto3)
// tslint:disable
import { CommentService } from "./service";
import type { RemoveCommentResponse } from "./request";
import type { RemoveCommentRequest } from "./request";
import type { AddCommentResponse } from "./request";
import type { AddCommentRequest } from "./request";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ArticleService } from "./service";
import type { DeleteArticleResponse } from "./request";
import type { DeleteArticleRequest } from "./request";
import type { UpdateArticleResponse } from "./request";
import type { UpdateArticleRequest } from "./request";
import type { CreateArticleResponse } from "./request";
import type { CreateArticleRequest } from "./request";
import type { GetArticleResponse } from "./request";
import type { GetArticleRequest } from "./request";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListArticlesResponse } from "./request";
import type { ListArticlesRequest } from "./request";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service article.v1alpha.ArticleService
 */
export interface IArticleServiceClient {
    /**
     * @generated from protobuf rpc: ListArticles(article.v1alpha.ListArticlesRequest) returns (article.v1alpha.ListArticlesResponse);
     */
    listArticles(input: ListArticlesRequest, options?: RpcOptions): UnaryCall<ListArticlesRequest, ListArticlesResponse>;
    /**
     * @generated from protobuf rpc: GetArticle(article.v1alpha.GetArticleRequest) returns (article.v1alpha.GetArticleResponse);
     */
    getArticle(input: GetArticleRequest, options?: RpcOptions): UnaryCall<GetArticleRequest, GetArticleResponse>;
    /**
     * @generated from protobuf rpc: CreateArticle(article.v1alpha.CreateArticleRequest) returns (article.v1alpha.CreateArticleResponse);
     */
    createArticle(input: CreateArticleRequest, options?: RpcOptions): UnaryCall<CreateArticleRequest, CreateArticleResponse>;
    /**
     * @generated from protobuf rpc: UpdateArticle(article.v1alpha.UpdateArticleRequest) returns (article.v1alpha.UpdateArticleResponse);
     */
    updateArticle(input: UpdateArticleRequest, options?: RpcOptions): UnaryCall<UpdateArticleRequest, UpdateArticleResponse>;
    /**
     * @generated from protobuf rpc: DeleteArticle(article.v1alpha.DeleteArticleRequest) returns (article.v1alpha.DeleteArticleResponse);
     */
    deleteArticle(input: DeleteArticleRequest, options?: RpcOptions): UnaryCall<DeleteArticleRequest, DeleteArticleResponse>;
}
/**
 * @generated from protobuf service article.v1alpha.ArticleService
 */
export class ArticleServiceClient implements IArticleServiceClient, ServiceInfo {
    typeName = ArticleService.typeName;
    methods = ArticleService.methods;
    options = ArticleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListArticles(article.v1alpha.ListArticlesRequest) returns (article.v1alpha.ListArticlesResponse);
     */
    listArticles(input: ListArticlesRequest, options?: RpcOptions): UnaryCall<ListArticlesRequest, ListArticlesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListArticlesRequest, ListArticlesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetArticle(article.v1alpha.GetArticleRequest) returns (article.v1alpha.GetArticleResponse);
     */
    getArticle(input: GetArticleRequest, options?: RpcOptions): UnaryCall<GetArticleRequest, GetArticleResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetArticleRequest, GetArticleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateArticle(article.v1alpha.CreateArticleRequest) returns (article.v1alpha.CreateArticleResponse);
     */
    createArticle(input: CreateArticleRequest, options?: RpcOptions): UnaryCall<CreateArticleRequest, CreateArticleResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateArticleRequest, CreateArticleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateArticle(article.v1alpha.UpdateArticleRequest) returns (article.v1alpha.UpdateArticleResponse);
     */
    updateArticle(input: UpdateArticleRequest, options?: RpcOptions): UnaryCall<UpdateArticleRequest, UpdateArticleResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateArticleRequest, UpdateArticleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteArticle(article.v1alpha.DeleteArticleRequest) returns (article.v1alpha.DeleteArticleResponse);
     */
    deleteArticle(input: DeleteArticleRequest, options?: RpcOptions): UnaryCall<DeleteArticleRequest, DeleteArticleResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteArticleRequest, DeleteArticleResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service article.v1alpha.CommentService
 */
export interface ICommentServiceClient {
    /**
     * @generated from protobuf rpc: AddComment(article.v1alpha.AddCommentRequest) returns (article.v1alpha.AddCommentResponse);
     */
    addComment(input: AddCommentRequest, options?: RpcOptions): UnaryCall<AddCommentRequest, AddCommentResponse>;
    /**
     * @generated from protobuf rpc: RemoveComment(article.v1alpha.RemoveCommentRequest) returns (article.v1alpha.RemoveCommentResponse);
     */
    removeComment(input: RemoveCommentRequest, options?: RpcOptions): UnaryCall<RemoveCommentRequest, RemoveCommentResponse>;
}
/**
 * @generated from protobuf service article.v1alpha.CommentService
 */
export class CommentServiceClient implements ICommentServiceClient, ServiceInfo {
    typeName = CommentService.typeName;
    methods = CommentService.methods;
    options = CommentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AddComment(article.v1alpha.AddCommentRequest) returns (article.v1alpha.AddCommentResponse);
     */
    addComment(input: AddCommentRequest, options?: RpcOptions): UnaryCall<AddCommentRequest, AddCommentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddCommentRequest, AddCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveComment(article.v1alpha.RemoveCommentRequest) returns (article.v1alpha.RemoveCommentResponse);
     */
    removeComment(input: RemoveCommentRequest, options?: RpcOptions): UnaryCall<RemoveCommentRequest, RemoveCommentResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveCommentRequest, RemoveCommentResponse>("unary", this._transport, method, opt, input);
    }
}
