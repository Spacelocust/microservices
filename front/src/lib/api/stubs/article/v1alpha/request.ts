// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "article/v1alpha/request.proto" (package "article.v1alpha", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Article } from "./message";
import { ArticleWithComments } from "./message";
import { Comment } from "./message";
/**
 * @generated from protobuf message article.v1alpha.AddCommentRequest
 */
export interface AddCommentRequest {
    /**
     * @generated from protobuf field: string article_id = 1;
     */
    articleId: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message article.v1alpha.AddCommentResponse
 */
export interface AddCommentResponse {
    /**
     * @generated from protobuf field: article.v1alpha.Comment comment = 1;
     */
    comment?: Comment;
}
/**
 * @generated from protobuf message article.v1alpha.RemoveCommentRequest
 */
export interface RemoveCommentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message article.v1alpha.RemoveCommentResponse
 */
export interface RemoveCommentResponse {
    /**
     * @generated from protobuf field: article.v1alpha.ArticleWithComments article = 1;
     */
    article?: ArticleWithComments;
}
/**
 * @generated from protobuf message article.v1alpha.ListArticlesRequest
 */
export interface ListArticlesRequest {
}
/**
 * @generated from protobuf message article.v1alpha.ListArticlesResponse
 */
export interface ListArticlesResponse {
    /**
     * @generated from protobuf field: repeated article.v1alpha.Article articles = 1;
     */
    articles: Article[];
}
/**
 * @generated from protobuf message article.v1alpha.GetArticleRequest
 */
export interface GetArticleRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message article.v1alpha.GetArticleResponse
 */
export interface GetArticleResponse {
    /**
     * @generated from protobuf field: article.v1alpha.ArticleWithComments article = 1;
     */
    article?: ArticleWithComments;
}
/**
 * @generated from protobuf message article.v1alpha.CreateArticleRequest
 */
export interface CreateArticleRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message article.v1alpha.CreateArticleResponse
 */
export interface CreateArticleResponse {
    /**
     * @generated from protobuf field: article.v1alpha.Article article = 1;
     */
    article?: Article;
}
/**
 * @generated from protobuf message article.v1alpha.UpdateArticleRequest
 */
export interface UpdateArticleRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message article.v1alpha.UpdateArticleResponse
 */
export interface UpdateArticleResponse {
    /**
     * @generated from protobuf field: article.v1alpha.Article article = 1;
     */
    article?: Article;
}
/**
 * @generated from protobuf message article.v1alpha.DeleteArticleRequest
 */
export interface DeleteArticleRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message article.v1alpha.DeleteArticleResponse
 */
export interface DeleteArticleResponse {
    /**
     * @generated from protobuf field: article.v1alpha.Article article = 1;
     */
    article?: Article;
}
// @generated message type with reflection information, may provide speed optimized methods
class AddCommentRequest$Type extends MessageType<AddCommentRequest> {
    constructor() {
        super("article.v1alpha.AddCommentRequest", [
            { no: 1, name: "article_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddCommentRequest>): AddCommentRequest {
        const message = { articleId: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCommentRequest): AddCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string article_id */ 1:
                    message.articleId = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string article_id = 1; */
        if (message.articleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.articleId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.AddCommentRequest
 */
export const AddCommentRequest = new AddCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCommentResponse$Type extends MessageType<AddCommentResponse> {
    constructor() {
        super("article.v1alpha.AddCommentResponse", [
            { no: 1, name: "comment", kind: "message", T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<AddCommentResponse>): AddCommentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCommentResponse): AddCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.AddCommentResponse
 */
export const AddCommentResponse = new AddCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveCommentRequest$Type extends MessageType<RemoveCommentRequest> {
    constructor() {
        super("article.v1alpha.RemoveCommentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveCommentRequest>): RemoveCommentRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveCommentRequest): RemoveCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.RemoveCommentRequest
 */
export const RemoveCommentRequest = new RemoveCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveCommentResponse$Type extends MessageType<RemoveCommentResponse> {
    constructor() {
        super("article.v1alpha.RemoveCommentResponse", [
            { no: 1, name: "article", kind: "message", T: () => ArticleWithComments }
        ]);
    }
    create(value?: PartialMessage<RemoveCommentResponse>): RemoveCommentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveCommentResponse): RemoveCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.ArticleWithComments article */ 1:
                    message.article = ArticleWithComments.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.ArticleWithComments article = 1; */
        if (message.article)
            ArticleWithComments.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.RemoveCommentResponse
 */
export const RemoveCommentResponse = new RemoveCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticlesRequest$Type extends MessageType<ListArticlesRequest> {
    constructor() {
        super("article.v1alpha.ListArticlesRequest", []);
    }
    create(value?: PartialMessage<ListArticlesRequest>): ListArticlesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticlesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticlesRequest): ListArticlesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListArticlesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.ListArticlesRequest
 */
export const ListArticlesRequest = new ListArticlesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticlesResponse$Type extends MessageType<ListArticlesResponse> {
    constructor() {
        super("article.v1alpha.ListArticlesResponse", [
            { no: 1, name: "articles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Article }
        ]);
    }
    create(value?: PartialMessage<ListArticlesResponse>): ListArticlesResponse {
        const message = { articles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticlesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticlesResponse): ListArticlesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated article.v1alpha.Article articles */ 1:
                    message.articles.push(Article.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticlesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated article.v1alpha.Article articles = 1; */
        for (let i = 0; i < message.articles.length; i++)
            Article.internalBinaryWrite(message.articles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.ListArticlesResponse
 */
export const ListArticlesResponse = new ListArticlesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticleRequest$Type extends MessageType<GetArticleRequest> {
    constructor() {
        super("article.v1alpha.GetArticleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticleRequest>): GetArticleRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticleRequest): GetArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.GetArticleRequest
 */
export const GetArticleRequest = new GetArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticleResponse$Type extends MessageType<GetArticleResponse> {
    constructor() {
        super("article.v1alpha.GetArticleResponse", [
            { no: 1, name: "article", kind: "message", T: () => ArticleWithComments }
        ]);
    }
    create(value?: PartialMessage<GetArticleResponse>): GetArticleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetArticleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticleResponse): GetArticleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.ArticleWithComments article */ 1:
                    message.article = ArticleWithComments.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.ArticleWithComments article = 1; */
        if (message.article)
            ArticleWithComments.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.GetArticleResponse
 */
export const GetArticleResponse = new GetArticleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateArticleRequest$Type extends MessageType<CreateArticleRequest> {
    constructor() {
        super("article.v1alpha.CreateArticleRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateArticleRequest>): CreateArticleRequest {
        const message = { title: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateArticleRequest): CreateArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.CreateArticleRequest
 */
export const CreateArticleRequest = new CreateArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateArticleResponse$Type extends MessageType<CreateArticleResponse> {
    constructor() {
        super("article.v1alpha.CreateArticleResponse", [
            { no: 1, name: "article", kind: "message", T: () => Article }
        ]);
    }
    create(value?: PartialMessage<CreateArticleResponse>): CreateArticleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateArticleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateArticleResponse): CreateArticleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.Article article */ 1:
                    message.article = Article.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateArticleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.Article article = 1; */
        if (message.article)
            Article.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.CreateArticleResponse
 */
export const CreateArticleResponse = new CreateArticleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateArticleRequest$Type extends MessageType<UpdateArticleRequest> {
    constructor() {
        super("article.v1alpha.UpdateArticleRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateArticleRequest>): UpdateArticleRequest {
        const message = { title: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateArticleRequest): UpdateArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.UpdateArticleRequest
 */
export const UpdateArticleRequest = new UpdateArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateArticleResponse$Type extends MessageType<UpdateArticleResponse> {
    constructor() {
        super("article.v1alpha.UpdateArticleResponse", [
            { no: 1, name: "article", kind: "message", T: () => Article }
        ]);
    }
    create(value?: PartialMessage<UpdateArticleResponse>): UpdateArticleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateArticleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateArticleResponse): UpdateArticleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.Article article */ 1:
                    message.article = Article.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateArticleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.Article article = 1; */
        if (message.article)
            Article.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.UpdateArticleResponse
 */
export const UpdateArticleResponse = new UpdateArticleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteArticleRequest$Type extends MessageType<DeleteArticleRequest> {
    constructor() {
        super("article.v1alpha.DeleteArticleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteArticleRequest>): DeleteArticleRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteArticleRequest): DeleteArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.DeleteArticleRequest
 */
export const DeleteArticleRequest = new DeleteArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteArticleResponse$Type extends MessageType<DeleteArticleResponse> {
    constructor() {
        super("article.v1alpha.DeleteArticleResponse", [
            { no: 1, name: "article", kind: "message", T: () => Article }
        ]);
    }
    create(value?: PartialMessage<DeleteArticleResponse>): DeleteArticleResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteArticleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteArticleResponse): DeleteArticleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* article.v1alpha.Article article */ 1:
                    message.article = Article.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteArticleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* article.v1alpha.Article article = 1; */
        if (message.article)
            Article.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message article.v1alpha.DeleteArticleResponse
 */
export const DeleteArticleResponse = new DeleteArticleResponse$Type();
